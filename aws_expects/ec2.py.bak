# Copyright 2015 Jim Rosser
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import boto3
from expects.matchers import Matcher


class ec2_instances(object):
    def __init__(self, **kwargs):
        self.less_than = kwargs.get('less_than')
        self.less_or_equal = kwargs.get('less_or_equal')
        self.greater_than = kwargs.get('greater_than')
        self.greater_or_equal = kwargs.get('greater_or_equal')
        self.equal_to = kwargs.get('equal_to')


class have_tag(Matcher):
    def __init__(self, **kwargs):
        self._expected_key = kwargs.get('key')
        if self._expected_key is None:
            raise TypeError('Expected kwarg name to be set')
        self._expected_value = [kwargs.get('value')]

    def _match(self, ec2_object):
        if not isinstance(ec2_object, ec2_instances):
            raise BaseException("Expected matcher to be type 'ec2_instances' not {}"
                                .format(type(ec2_object)))

        client = boto3.client('ec2')
        results = client.describe_instances(Filters=[
            {
                'Name': ("tag:{}".format(self._expected_key)),
                'Values': self._expected_value,
            }
        ])

        reservations = results.get('Reservations')
        if reservations is None:
            return False

        instances = []
        for reservation in reservations:
            instances.append(reservation.get('Instances'))
        if not instances:
            return False

        instance_length = len(instances)
        if ec2_object.equal_to is not None:
            return instance_length == ec2_object.equal_to
        elif ec2_object.greater_than is not None:
            return instance_length > ec2_object.greater_than
        elif ec2_object.greater_or_equal is not None:
            return instance_length >= ec2_object.greater_or_equal
        elif ec2_object.less_or_equal is not None:
            return instance_length <= ec2_object.less_or_equal
        elif ec2_object.less_than is not None:
            return instance_length < ec2_object.less_than
        else:
            return instance_length > 1
